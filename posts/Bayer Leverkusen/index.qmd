---
title: "Bayer Leverkusen Goal Analysis"
author: "Gareth Edwards"
categories: [Football, Passing, Bundesliga]
---

```{r option-chunk, include=FALSE}
knitr::opts_chunk$set(echo=FALSE)
knitr::opts_chunk$set(warning=FALSE)
knitr::opts_chunk$set(message = FALSE)

```

```{r load-libs, echo=FALSE}
# load libraries
library(ggplot2)
library(dplyr)
library(shiny)
library(shinythemes)
library(shinylive)
library(SBpitch)
```

```{r load-data}
# load data
# leverkusen_23_24_events = readRDS('../data/leverkusen_23_24_events.rds')
# leverkusen_23_24_matches = readRDS('../data/leverkusen_23_24_matches.rds')
```

# Introduction

The 2023/24 season of the Bundesliga will be remembered as one of the most extraordinary chapters in German football history. Bayer Leverkusen, a club often overshadowed by giants like Bayern Munich and Borussia Dortmund, etched their name in the annals of football with an unbeaten season. This remarkable achievement was a testament to the strategic acumen of their manager, the skill and determination of the players, and the unwavering support of their fans.

Bayer Leverkusen has become the talk of the town in the world of football, and the question on everyone's minds now will be, "can they do it again?" My first question however, is why was no one able to beat them?

I am a strong believer of "Attack wins you games, defense wins you titles" So, my first approach to beating a team would be to figure out how do we keep them from scoring!

# My Focus

My Focus in this blog is on the passing. If we are to keep it as simple as possible, we know that football is really about moving the ball and scoring a goal. If you can move the ball around well, you can score goals. On the other hand, if you know how a team moves the ball around, you can stop the team from scoring.

I have seen many analysts take an overall look at a teams passing and then develop passing networks based on heaps of passing data, most of which were sideways and backward passes. What I have decided to do is take a closer look, and zoom in on passing and passing sequences that lead to goals only.

My first order of action, given that I haven't watched a Bayer Leverkusen match last season, was to visualise all their goals for the 23/24 Bundesliga season. In the interactive visual below we can select a match and view all the unbroken passing sequences that lead to Leverkusen goals (Note: Some matches have no visualisation as there were no goals scored by Leverkusen in those matches).

```{=html}
<iframe src="https://g-edwards.shinyapps.io/bayer_leverkusen_pass_sequence/" data-external="1" width="800" height="800">
</iframe>
```
You might be confused by the grey dotted line on the plots that is labelled as "Avg Direction of Play" on the legend. This is simply a line of best fit that goes through all the player locations in the passing sequence.

When we look at some of these plots we can see a nice, abstracted view, of goals scored by Bayer Leverkusen, but, when the passing sequences become a bit more lengthy we may start to get lost in the dots and lines (see the goal scored at 46:16 in the RB Leipzig vs Bayer Leverkusen match).

To, somewhat, alleviate this problem, one can use passing networks. Passing networks are a great visualisation as they contain a large amount of information in one plot. Now, often I have seen passing networks based on passing data from a whole match, or even a whole season, but this often includes many sideways and backwards passes that we might not be that interested about. Below we see a plot of a passing network plot for Bayern Leverkusen that takes into account all of their passes for the season.

....... Show pass network for whole season .....

......Comment about plot (if there is little to no centrality)......

In the context of facing a formidable team, and figuring out how to stop them from scoring goals, the focus should be on what happens when they score goals. Below I have placed a passing network plot based on only the passes that lead to goals.

..... Show pass network for whole season .....

.....Compare plots ......

.... Show a side by side plot .....

....Conclude.....

Show average passing network vs goals scored passing network.

```{r all-moves-before-goal}
# this method takes in a full event dataset from a given team and returns all moves in all goal sequences
all_moves_before_goal <- function(team_event_data, team_name){
  moves_before_all_goals = tibble()
  for (i in leverkusen_23_24_matches$match_id) {
    # print(i)
    goal_vars = team_event_data %>% filter(match_id==i &
                                           possession_team.name==team_name &
                                           shot.outcome.name=="Goal" &
                                           shot.type.name=="Open Play") %>%
      select(index)
    
    
    if(nrow(goal_vars) != 0) {
      
      for(x in goal_vars$index){
        # print(paste0("goal index: ",x))
        
        # filter out the selected match
        aMatch = team_event_data %>% filter(match_id==i)
        # filter out dataset of moves before a selected goal
        events_before_goal = moves_before_goal(x, aMatch)
        
        if (nrow(events_before_goal) != 0) {
          # select only variables we need for the plot and arrange in ascending order
          passes_before_goal = events_before_goal %>% select(c(team.name, index, type.name, player.name,
                                                               pass.recipient.name, location, pass.end_location)) %>%
            arrange(index)
          
          passes_before_goal[passes_before_goal == "NULL"] = NA # convert NULLs to NA
          
          moves_before_all_goals = rbind(moves_before_all_goals,passes_before_goal)
        }
      }
    }
  }
  return(moves_before_all_goals)
}
```

```{r avg-player-loc}
# takes in an event dataframe and calculates average pass and receiving position (Threshold deals with number of touches)
avg_player_locations = function(event_data, team_name, touch_threshold){
  
  # separate coordinate values
  event_data <- event_data %>%
    filter(type.name=="Pass" & team.name==team_name) %>%
    mutate(x=unlist(lapply(location, function(v) as.numeric(v[1]))),
           y=unlist(lapply(location, function(v) as.numeric(v[2]))),
           pass_end_x=unlist(lapply(pass.end_location, function(v) ifelse(is.null(v), NA, as.numeric(v[1])))),
           pass_end_y=unlist(lapply(pass.end_location, function(v) ifelse(is.null(v), NA, as.numeric(v[2])))))
  
  # build another dataset with all unique players and their average x and y positions
  avg_pass_location = event_data %>%
    group_by(player.name) %>%
    mutate(avg_pass_x = mean(x),
           avg_pass_y = mean(y),
           passing_touches = n()) %>%
    ungroup() %>%
    group_by(pass.recipient.name) %>%
    mutate(avg_rec_x = mean(pass_end_x),
           avg_rec_y = mean(pass_end_y),
           rec_touches = n()) %>%
    ungroup()
  
  # average passing positions
  avg_passes = avg_pass_location %>%
    select(player.name, avg_pass_x, avg_pass_y, passing_touches) %>%
    distinct()
  
  # average receiving positions
  avg_rec = avg_pass_location %>%
    select(pass.recipient.name, avg_rec_x, avg_rec_y, rec_touches) %>%
    distinct()
  
  # average passing and receiving positions
  player_locations = avg_passes %>%
    left_join(avg_rec, by=join_by(player.name==pass.recipient.name)) %>%
    group_by(player.name) %>%
    mutate(avg_x = mean(c(avg_pass_x, avg_rec_x)),
           avg_y = mean(c(avg_pass_y, avg_rec_y)),
           num_touches = sum(c(passing_touches, rec_touches))) %>%
    filter(passing_touches >= touch_threshold) %>%
    mutate(player.surname = sub(".*\\s", "", player.name))
  
  return(player_locations)
  
}
```

```{r passing-links}
# build another dataset with pass links (group by player.name and recipient.name) and their average x y locations
passing_links <- function(event_data, team_name, avg_player_positions, link_freq){
  
  links <- event_data %>%
    filter(team.name == team_name, type.name=="Pass") %>%
    left_join(avg_player_positions, by = c("player.name" = "player.name")) %>%
    rename(passer_x = avg_x, passer_y = avg_y) %>%
    left_join(avg_player_positions, by = c("pass.recipient.name" = "player.name")) %>%
    rename(rec_x = avg_x, rec_y = avg_y) %>%
    select(player.name, pass.recipient.name, passer_x, passer_y, rec_x, rec_y) %>%
    group_by(player.name, pass.recipient.name) %>%
    mutate(n=n()) %>%
    arrange(n) %>%
    distinct()
  
  return(links)
}
```

```{r apply-functions}
# all_moves = all_moves_before_goal(leverkusen_23_24_events, 'Bayer Leverkusen')
# player_locations = avg_player_locations(all_moves, 'Bayer Leverkusen', 5)
# plinks = passing_links(all_moves, 'Bayer Leverkusen', player_locations)
```
